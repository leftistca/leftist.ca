/*
package middleware

import (
	"net/http/httptest"
	"net/http"
	"time"
	"fmt"
	"sync"
	"io/ioutil"
)

type CachedResponse struct {
	responseRecorder *httptest.ResponseRecorder
	URL string
	cacheTime time.Time
}

type ResponseCache struct {
	//some slice that will hold a bunch of CachedResponses
	cachedResponses []*CachedResponse
	mux sync.Mutex
}

func NewResponseCache() *ResponseCache {
	responseCache := ResponseCache{
		cachedResponses: []*CachedResponse{},
	}
	return &responseCache
}

func (responseCache *ResponseCache) GetCachedResponse(URL string) *CachedResponse {
	//get a cached response if it was stored in the last 8 hours
	for _, cachedResponse := range responseCache.cachedResponses {
		if cachedResponse.URL == URL {
			if time.Since(cachedResponse.cacheTime) < (time.Second * 16) {
				return cachedResponse
			}
			break
		}
	}
	return nil
}

func (responseCache *ResponseCache) StoreCachedResponse(URL string, responseRecorder *httptest.ResponseRecorder) *CachedResponse {
	responseCache.mux.Lock()																	//Mutex Lock
	cachedResponse := responseCache.GetCachedResponse(URL)
	if cachedResponse != nil {																//If a cache exists at this URL
		cachedResponse.responseRecorder = responseRecorder									//	Update it's recorder
		cachedResponse.cacheTime = time.Now()														//	Update it's time
	}else{																						//If a cache DOES NOT exist at this URL
		cachedResponse = &CachedResponse{														//	Create a new cache
			responseRecorder: responseRecorder,
			URL: URL,
			cacheTime: time.Now(),
		}
		responseCache.cachedResponses = append(responseCache.cachedResponses, cachedResponse)
	}
	responseCache.mux.Unlock()
	return cachedResponse
}

func (responseCache *ResponseCache) ResponseCacheMiddleware(h http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		cachedResponse := responseCache.GetCachedResponse(r.URL.String())							//Find a cache with this URL
		if cachedResponse == nil {																	//If it does not exist...
			fmt.Printf("RESPONSECACHE: Could not find cache at %s \n", r.URL.String())
			responseRecorder := httptest.NewRecorder() 												//	create a response recorder.
			h.ServeHTTP(responseRecorder, r)														//	pass it to the next http handler function
			cachedResponse = responseCache.StoreCachedResponse(r.URL.String(), responseRecorder)	//	store the recorder in the cache	
		}

		fmt.Printf("RESPONSECACHE: Found cached response at %s \n", r.URL.String())
		fmt.Printf("Number of cached responses: %d\n", len(responseCache.cachedResponses))
		w.WriteHeader(cachedResponse.responseRecorder.Result().StatusCode)
		body, _ := ioutil.ReadAll(cachedResponse.responseRecorder.Result().Body)
		w.Write(body)
	}
}

*/